{"version":3,"sources":["forms/AddUserForm.js","forms/EditUserForm.js","tables/UserTable.js","App.js","index.js"],"names":["AddUserForm","props","initialFormState","id","name","username","useState","user","setUser","handleInputChange","event","target","value","onSubmit","preventDefault","addUser","autoComplete","type","onChange","EditUserForm","currentUser","useEffect","updateUser","onClick","setEditing","className","UserTable","users","length","map","key","editRow","deleteUser","colSpan","App","setUsers","setCurrentUser","editing","updatedUser","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65cf955d.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst AddUserForm = props => {\n\tconst initialFormState = { id: null, name: '', username: '' }\n\tconst [ user, setUser ] = useState(initialFormState)\n\n\tconst handleInputChange = event => {\n\t\tconst { name, value } = event.target\n\n\t\tsetUser({ ...user, [name]: value })\n\t}\n\n\treturn (\n\t\t<form\n\t\t\tonSubmit={event => {\n\t\t\t\tevent.preventDefault()\n\t\t\t\tif (!user.name || !user.username) return\n\n\t\t\t\tprops.addUser(user)\n\t\t\t\tsetUser(initialFormState)\n\t\t\t}}\n\t\t>\n\t\t\t<label>Name</label>\n\t\t\t<input autoComplete='off' type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n\t\t\t<label>Username</label>\n\t\t\t<input autoComplete='oft ' type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n\t\t\t<button>Add new user</button>\n\t\t</form>\n\t)\n}\n\nexport default AddUserForm\n","import React, { useState, useEffect } from 'react'\n\nconst EditUserForm = props => {\n  const [ user, setUser ] = useState(props.currentUser)\n\n  useEffect(\n    () => {\n      setUser(props.currentUser)\n    },\n    [ props ]\n  )\n  // You can tell React to skip applying an effect if certain values havenâ€™t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setUser({ ...user, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={event => {\n        event.preventDefault()\n\n        props.updateUser(user.id, user)\n      }}\n    >\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={user.name} onChange={handleInputChange} />\n      <label>Username</label>\n      <input type=\"text\" name=\"username\" value={user.username} onChange={handleInputChange} />\n      <button>Update user</button>\n      <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n      </button>\n    </form>\n  )\n}\n\nexport default EditUserForm\n","import React from 'react'\n\nconst UserTable = props => (\n  <table>\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Username</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.users.length > 0 ? (\n        props.users.map(user => (\n          <tr key={user.id}>\n            <td>{user.name}</td>\n            <td>{user.username}</td>\n            <td>\n              <button\n                onClick={() => {\n                  props.editRow(user)\n                }}\n                className=\"button muted-button\"\n              >\n                Edit\n              </button>\n              <button\n                onClick={() => props.deleteUser(user.id)}\n                className=\"button muted-button\"\n              >\n                Delete\n              </button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={3}>No users</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n)\n\nexport default UserTable\n","import React, { useState, Fragment } from 'react'\nimport AddUserForm from './forms/AddUserForm'\nimport EditUserForm from './forms/EditUserForm'\nimport UserTable from './tables/UserTable'\n\nconst App = () => {\n\t// Data\n\tconst usersData = [ ]\n\n\tconst initialFormState = { id: null, name: '', username: '' }\n\n\t// Setting state\n\tconst [ users, setUsers ] = useState(usersData)\n\tconst [ currentUser, setCurrentUser ] = useState(initialFormState)\n\tconst [ editing, setEditing ] = useState(false)\n\n\t// CRUD operations\n\tconst addUser = user => {\n\t\tuser.id = users.length + 1\n\t\tsetUsers([ ...users, user ])\n\t}\n\n\tconst deleteUser = id => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.filter(user => user.id !== id))\n\t}\n\n\tconst updateUser = (id, updatedUser) => {\n\t\tsetEditing(false)\n\n\t\tsetUsers(users.map(user => (user.id === id ? updatedUser : user)))\n\t}\n\n\tconst editRow = user => {\n\t\tsetEditing(true)\n\n\t\tsetCurrentUser({ id: user.id, name: user.name, username: user.username })\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<h1>CRUD App with Hooks</h1>\n\t\t\t<div className=\"flex-row\">\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t{editing ? (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Edit user</h2>\n\t\t\t\t\t\t\t<EditUserForm\n\t\t\t\t\t\t\t\tediting={editing}\n\t\t\t\t\t\t\t\tsetEditing={setEditing}\n\t\t\t\t\t\t\t\tcurrentUser={currentUser}\n\t\t\t\t\t\t\t\tupdateUser={updateUser}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<h2>Add user</h2>\n\t\t\t\t\t\t\t<AddUserForm addUser={addUser} />\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"flex-large\">\n\t\t\t\t\t<h2>View users</h2>\n\t\t\t\t\t<UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}